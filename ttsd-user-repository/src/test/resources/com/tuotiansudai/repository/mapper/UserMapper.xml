<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.UserMapper">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="userResultMap" type="UserModel">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="mobile" property="mobile"/>
        <result column="user_name" property="userName"/>
        <result column="identity_number" property="identityNumber"/>
        <result column="register_time" property="registerTime"/>
        <result column="last_modified_time" property="lastModifiedTime"/>
        <result column="last_modified_user" property="lastModifiedUser"/>
        <result column="avatar" property="avatar"/>
        <result column="referrer" property="referrer"/>
        <result column="status" property="status"/>
        <result column="salt" property="salt"/>
        <result column="channel" property="channel"/>
        <result column="source" property="source"/>
        <result column="province" property="province"/>
        <result column="city" property="city"/>
        <result column="sign_in_count" property="signInCount"/>
        <result column="last_login_time" property="lastLoginTime"/>
        <result column="last_login_source" property="lastLoginSource"/>
        <result column="experience_balance" property="experienceBalance"/>
    </resultMap>

    <resultMap id="userViewResultMap" type="UserView">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="mobile" property="mobile"/>
        <result column="user_name" property="userName"/>
        <result column="identity_number" property="identityNumber"/>
        <result column="email" property="email"/>
        <result column="register_time" property="registerTime"/>
        <result column="referrer_mobile" property="referrerMobile"/>
        <result column="status" property="status"/>
        <result column="channel" property="channel"/>
        <result column="source" property="source"/>
        <result column="province" property="province"/>
        <result column="city" property="city"/>
        <result column="auto_invest_status" property="autoInvestStatus"/>
        <result column="last_bill_time" property="lastBillTime"/>
    </resultMap>

    <insert id="create" parameterType="UserModel" useGeneratedKeys="true" keyProperty="id">
        insert ignore into user (login_name, password, mobile, user_name, identity_number, email, register_time, last_modified_time, referrer, status, salt, channel, source, sign_in_count, experience_balance)
        value(#{loginName}, #{password}, #{mobile}, #{userName}, #{identityNumber}, #{email}, #{registerTime}, #{lastModifiedTime}, #{referrer}, #{status}, #{salt}, #{channel}, #{source}, #{signInCount}, #{experienceBalance})
    </insert>

    <update id="updateUser" parameterType="com.tuotiansudai.repository.model.UserModel">
        update user set email = #{email},
        mobile = #{mobile},
        user_name = #{userName},
        identity_number = #{identityNumber},
        password = #{password},
        last_modified_time = #{lastModifiedTime},
        last_modified_user = #{lastModifiedUser},
        status = #{status},
        referrer = #{referrer},
        province = #{province},
        city = #{city},
        sign_in_count = #{signInCount},
        last_login_time = #{lastLoginTime},
        last_login_source = #{lastLoginSource},
        experience_balance = #{experienceBalance}
        where id = #{id}
    </update>

    <update id="updateExperienceBalance" parameterType="map">
        update user set
        <choose>
            <when test='experienceBillOperationType.name().equals("IN")'>experience_balance = experience_balance + #{experienceBalance}</when>
            <when test='experienceBillOperationType.name().equals("OUT")'>experience_balance = experience_balance - #{experienceBalance}</when>
            <otherwise>experience_balance = experience_balance</otherwise>
        </choose>
        where login_name = #{loginName}
    </update>

    <select id="findByLoginName" parameterType="string" resultMap="userResultMap">
        select * from user where login_name = #{loginName}
    </select>

    <select id="lockByLoginName" parameterType="string" resultMap="userResultMap" useCache="false">
        select * from user where login_name = #{loginName} for update
    </select>

    <select id="findExperienceByLoginName" parameterType="string" resultType="long" useCache="false">
        select IFNULL(experience_balance,0) as experienceAmount from user where login_name = #{loginName}
    </select>

    <select id="findByMobile" parameterType="string" resultMap="userResultMap">
        select * from user where mobile = #{mobile}
    </select>

    <select id="findByLoginNameOrMobile" parameterType="string" resultMap="userResultMap">
        select * from user where login_name = #{loginNameOrMobile} or mobile = #{loginNameOrMobile}
    </select>

    <select id="findByEmail" parameterType="string" resultMap="userResultMap">
        select * from user where email = #{email} and status = 'ACTIVE'
    </select>

    <select id="findUsersCount" resultType="long">
        select count(1) FROM user
    </select>

    <select id="findAllUsersByProvinces" resultType="java.lang.String">
        select login_name from user
        <if test="districtName != null and districtName.size != 0">
            where province in
            <foreach item="item" index="index" collection="districtName" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="findAllByRole" parameterType="map" resultType="string">
        SELECT t.login_name FROM user_role t join user u on t.login_name = u.login_name
        <if test="districtName != null and districtName.size != 0">
            and u.province in
            <foreach item="item" index="index" collection="districtName" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        WHERE t.role = #{role};
    </select>

    <select id="findUsersByRegisterTimeOrReferrer" parameterType="map" resultMap="userResultMap">
        select * from user where register_time between #{startTime} and #{endTime}
        <if test="referrer != null and referrer != ''">
            and referrer = #{referrer}
        </if>
        order by register_time
    </select>

    <select id="findByIdentityNumber" parameterType="string" resultMap="userResultMap">
        select * from user where identity_number = #{identityNumber}
    </select>

</mapper>