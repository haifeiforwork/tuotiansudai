<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tuotiansudai.repository.mapper.UserMapperDB">

    <cache eviction="LRU" type="com.tuotiansudai.cache.MybatisRedisCache"/>

    <resultMap id="userResultMap" type="UserModel">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="mobile" property="mobile"/>
        <result column="user_name" property="userName"/>
        <result column="identity_number" property="identityNumber"/>
        <result column="register_time" property="registerTime"/>
        <result column="last_modified_time" property="lastModifiedTime"/>
        <result column="last_modified_user" property="lastModifiedUser"/>
        <result column="avatar" property="avatar"/>
        <result column="referrer" property="referrer"/>
        <result column="status" property="status"/>
        <result column="salt" property="salt"/>
        <result column="channel" property="channel"/>
        <result column="source" property="source"/>
        <result column="province" property="province"/>
        <result column="city" property="city"/>
        <result column="sign_in_count" property="signInCount"/>
        <result column="last_login_time" property="lastLoginTime"/>
        <result column="last_login_source" property="lastLoginSource"/>
        <result column="experience_balance" property="experienceBalance"/>
    </resultMap>

    <resultMap id="userViewResultMap" type="UserView">
        <id column="id" property="id"/>
        <result column="login_name" property="loginName"/>
        <result column="mobile" property="mobile"/>
        <result column="user_name" property="userName"/>
        <result column="identity_number" property="identityNumber"/>
        <result column="email" property="email"/>
        <result column="register_time" property="registerTime"/>
        <result column="referrer_mobile" property="referrerMobile"/>
        <result column="status" property="status"/>
        <result column="channel" property="channel"/>
        <result column="source" property="source"/>
        <result column="province" property="province"/>
        <result column="city" property="city"/>
        <result column="auto_invest_status" property="autoInvestStatus"/>
        <result column="last_bill_time" property="lastBillTime"/>
    </resultMap>

    <update id="updateExperienceBalance" parameterType="map">
        update user set
        <choose>
            <when test='experienceBillOperationType.name().equals("IN")'>experience_balance = experience_balance + #{experienceBalance}</when>
            <when test='experienceBillOperationType.name().equals("OUT")'>experience_balance = experience_balance - #{experienceBalance}</when>
            <otherwise>experience_balance = experience_balance</otherwise>
        </choose>
        where login_name = #{loginName}
    </update>

    <update id="updateProvinceAndCity" parameterType="map">
        update user set
        province = #{province},
        city = #{city}
        where login_name = #{loginName}
    </update>

    <select id="lockByLoginName" parameterType="string" resultMap="userResultMap" useCache="false">
        select * from user where login_name = #{loginName} for update
    </select>

    <select id="findExperienceByLoginName" parameterType="string" resultType="long" useCache="false">
        select IFNULL(experience_balance,0) as experienceAmount from user where login_name = #{loginName}
    </select>

    <select id="findAllUserChannels" resultType="string">
        select IFNULL(channel,'其他') from user group by channel order by channel desc
    </select>

    <select id="findUsersByProvince" resultMap="userResultMap" useCache="false">
        select * from user
        where province is NULL
        or province = ''
        order by register_time desc
        limit 0, 100
    </select>

    <select id="findAllRecommendation" resultType="java.lang.String">
        SELECT
        r.login_name
        FROM
        referrer_relation r
        JOIN user_role u
        ON r.`referrer_login_name` = u.`login_name`
        AND u.`role` in ('SD_STAFF', 'ZC_STAFF')
        <if test="districtName != null and districtName.size != 0">
            join user ur on ur.login_name = r.login_name
            and ur.province in
            <foreach item="item" index="index" collection="districtName" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        WHERE r.`level` = '1'
    </select>

    <select id="findScaleByGender" parameterType="map" resultType="int">
        select count(distinct invest.login_name)
        from invest
        inner join loan on invest.loan_id= loan.id
        inner join user on user.login_name = invest.login_name
        where invest.status= 'SUCCESS'
        and loan.product_type != 'EXPERIENCE'
        and user.register_time &lt;= #{endDate}
        group by
        case if(length(identity_number)=18, cast(substring(identity_number,17,1) as UNSIGNED)%2, if(length(identity_number)=15,cast(substring(identity_number,15,1) as UNSIGNED)%2,3))
               when 1 then '男'
               else '女'
               end
    </select>

    <select id="findAgeDistributionByAge" parameterType="map" resultType="java.util.HashMap">
        SELECT CEIL(year(now()) - if(length(identity_number)=18,substring(identity_number,7,4),if(length(identity_number)=15,concat('19',substring(identity_number,7,2)),null))) as age, count(1) as totalCount
        from(
            select distinct identity_number
            from invest
            inner join loan on invest.loan_id= loan.id
            inner join user on user.login_name = invest.login_name
            where invest.status= 'SUCCESS'
            and loan.product_type != 'EXPERIENCE'
            and user.register_time &lt;= #{endDate}) u
        group by age
        order by totalCount asc
    </select>

    <select id="findCountInvestCityScaleTop3" parameterType="map" resultType="java.util.HashMap">
        select u.city, count(*) as totalCount
        from (
            select user.city, user.login_name
            from invest
            inner join loan on invest.loan_id = loan.id
            inner join user on user.login_name = invest.login_name
            where invest.status = 'SUCCESS'
            and loan.product_type != 'EXPERIENCE'
            and user.register_time &lt;= #{endDate}
            group by user.login_name , user.city) u
        group by u.city
        order by totalCount desc
        limit 3
    </select>

    <select id="findCountInvestCityScale" parameterType="map" resultType="long">
        select count(distinct user.login_name)
        from invest
        inner join loan on invest.loan_id= loan.id
        inner join user on user.login_name = invest.login_name
        where invest.status= 'SUCCESS'
        and loan.product_type != 'EXPERIENCE'
        and user.register_time &lt;= #{endDate}
    </select>

</mapper>