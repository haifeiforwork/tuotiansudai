import org.flywaydb.gradle.FlywayExtension
import org.flywaydb.gradle.task.FlywayMigrateTask

apply plugin: 'java'
apply plugin: 'org.flywaydb.flyway'

version = '1.0'

configurations {
    providedCompile
}

sourceSets {
    main.compileClasspath += configurations.providedCompile
    test.compileClasspath += configurations.providedCompile
    test.runtimeClasspath += configurations.providedCompile
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
    }
}

dependencies {
    def springVersion = '4.2.0.RELEASE'
    def slf4jVersion = '1.7.12'
    def mybatisVersion = '3.3.0'
    def mybatisSpringVersion = '1.2.3'
    def jacksonVersion = '2.6.1'
    def freemarkerVersion = '2.3.23'
    def springSecurityVersion = '4.0.2.RELEASE'
    compile project(":ttsd-membership"),
            fileTree(dir: 'libs', include: '**/*.jar'),
            "org.springframework:spring-webmvc:$springVersion",
            "org.springframework:spring-context-support:$springVersion",
            "org.springframework:spring-jdbc:$springVersion",
            "org.freemarker:freemarker:$freemarkerVersion",
            "org.mybatis:mybatis:$mybatisVersion",
            "org.mybatis:mybatis-spring:$mybatisSpringVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "org.slf4j:slf4j-log4j12:$slf4jVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            'com.google.guava:guava:18.0',
            'org.apache.commons:commons-lang3:3.4',
            'org.apache.commons:commons-collections4:4.0',
            'redis.clients:jedis:2.7.3',
            'org.hibernate:hibernate-validator:5.2.1.Final',
            'com.squareup.okhttp:okhttp:2.4.0',
            'com.zaxxer:HikariCP:2.4.3',
            'mysql:mysql-connector-java:5.1.35',
            'log4j:log4j:1.2.17',
            'joda-time:joda-time:2.8.1',
            'org.joda:joda-money:0.10.0',
            'javax.mail:mail:1.4.7',
            'org.xhtmlrenderer:core-renderer:R8',
            'org.jsoup:jsoup:1.8.3',
            'dom4j:dom4j:1.6.1',
            'org.quartz-scheduler:quartz:2.2.1',
            'org.quartz-scheduler:quartz-jobs:2.2.1',
            "commons-fileupload:commons-fileupload:1.3.1",
            'commons-httpclient:commons-httpclient:3.1',
            'com.google.code.gson:gson:2.4',
            'org.springframework:spring-aspects:4.2.0.RELEASE',
            'commons-lang:commons-lang:2.6',
            'commons-beanutils:commons-beanutils:1.9.2',
            'net.sf.ezmorph:ezmorph:1.0.6',
            'org.apache.httpcomponents:httpclient:4.5.1',
            'cn.jpush.api:jpush-client:3.2.8',
            "org.springframework.security:spring-security-config:$springSecurityVersion",
            "org.springframework.security:spring-security-taglibs:$springSecurityVersion"

    providedCompile "javax.servlet:javax.servlet-api:3.1.0"

    testCompile "junit:junit:4.12",
            'org.mockito:mockito-core:1.10.19',
            "javax.servlet:javax.servlet-api:3.1.0",
            "org.springframework:spring-test:$springVersion",
            "com.jayway.jsonpath:json-path:2.0.0",
            'com.squareup.okhttp:mockwebserver:2.4.0'
}

processResources.outputs.upToDateWhen { false }

/**
 * parameter: configPath
 * example: gradle ttsd-web:war -PconfigPath=/workspace/new_version_config/ttsd-service
 */
processResources {
    def innerConfigPath = "${project.projectDir.getPath()}/src/main/resources"
    def outerConfigPath = '/workspace/new_version_config/ttsd-service'
    if (project.hasProperty("configPath") && new File(configPath).isDirectory()) {
        innerConfigPath = configPath
    } else if (new File(outerConfigPath).isDirectory()) {
        innerConfigPath = outerConfigPath
    }
    from("${innerConfigPath}/ttsd-env.properties") {
        filter { String line ->
            if (project.hasProperty("dbhost") && line.startsWith("common.jdbc.host=")) {
                return "common.jdbc.host=${dbhost}"
            }

            if (project.hasProperty("dbport") && line.startsWith("common.jdbc.port=")) {
                return "common.jdbc.port=${dbport}"
            }

            if (project.hasProperty("redishost") && line.startsWith("common.redis.host=")) {
                return "common.redis.host=${redishost}"
            }

            if (project.hasProperty("redisport") && line.startsWith("common.redis.port=")) {
                return "common.redis.port=${redisport}"
            }
            line
        }
        into '/'
    }
    from("${innerConfigPath}/ttsd-biz.properties") {
        into '/'
    }
}

/**
 * parameter: dbhost dbport database
 * dbhost default value: ttsd-env.properties common.jdbc.host
 * dbport default value: ttsd-env.properties common.jdbc.port
 * database default value: aa
 * example: gradle -Pdbhost=192.168.33.10 -Pdbport=3306 -Pdatabase=aa ttsd-service:flywayMigrate
 *
 */
flyway {
    def properties = getEnvProperties()

    def defaultDatabase = 'aa'
    def defaultHost = properties.getProperty("common.jdbc.host")
    def defaultPort = properties.getProperty("common.jdbc.port")
    if (project.hasProperty('database')) {
        defaultDatabase = database;
    }
    if (project.hasProperty('dbhost')) {
        defaultHost = dbhost;
    }
    if (project.hasProperty('dbport')) {
        defaultPort = dbport;
    }
    outOfOrder = true
    validateOnMigrate = false
    locations = ["filesystem:db_migration/${defaultDatabase}"]
    schemas = ["${defaultDatabase}"]

    url = properties.getProperty("common.environment").equals("PRODUCTION") ? "jdbc:mysql://${defaultHost}:${defaultPort}/${defaultDatabase}?useUnicode=true&characterEncoding=UTF-8" : "jdbc:mysql://${defaultHost}:${defaultPort}?useUnicode=true&characterEncoding=UTF-8"
    user = properties.getProperty("common.jdbc.username")
    password = properties.getProperty("common.jdbc.password")
}

task flywayAA(type: FlywayMigrateTask) {
    def properties = getEnvProperties()
    def defaultHost = properties.getProperty("common.jdbc.host")
    def defaultPort = properties.getProperty("common.jdbc.port")
    extension = new FlywayExtension()
    if (project.hasProperty('dbhost')) {
        defaultHost = dbhost;
    }
    if (project.hasProperty('dbport')) {
        defaultPort = dbport;
    }
    extension.outOfOrder = true
    extension.validateOnMigrate = false
    extension.locations = ["filesystem:db_migration/aa"]
    extension.schemas = ["aa"]

    extension.url = properties.getProperty("common.environment").equals("PRODUCTION") ? "jdbc:mysql://${defaultHost}:${defaultPort}/aa?useUnicode=true&characterEncoding=UTF-8" : "jdbc:mysql://${defaultHost}:${defaultPort}?useUnicode=true&characterEncoding=UTF-8"
    extension.user = properties.getProperty("common.jdbc.username")
    extension.password = properties.getProperty("common.jdbc.password")
}

task flywayUMP(type: FlywayMigrateTask) {
    def properties = getEnvProperties()
    def defaultHost = properties.getProperty("common.jdbc.host")
    def defaultPort = properties.getProperty("common.jdbc.port")
    extension = new FlywayExtension()
    if (project.hasProperty('dbhost')) {
        defaultHost = dbhost;
    }
    if (project.hasProperty('dbport')) {
        defaultPort = dbport;
    }
    extension.outOfOrder = true
    extension.validateOnMigrate = false
    extension.locations = ["filesystem:db_migration/ump_operations"]
    extension.schemas = ["ump_operations"]

    extension.url = properties.getProperty("common.environment").equals("PRODUCTION") ? "jdbc:mysql://${defaultHost}:${defaultPort}/ump_operations?useUnicode=true&characterEncoding=UTF-8" : "jdbc:mysql://${defaultHost}:${defaultPort}?useUnicode=true&characterEncoding=UTF-8"
    extension.user = properties.getProperty("common.jdbc.username")
    extension.password = properties.getProperty("common.jdbc.password")
}

task flywaySms(type: FlywayMigrateTask) {
    def properties = getEnvProperties()
    def defaultHost = properties.getProperty("common.jdbc.host")
    def defaultPort = properties.getProperty("common.jdbc.port")
    extension = new FlywayExtension()
    if (project.hasProperty('dbhost')) {
        defaultHost = dbhost;
    }
    if (project.hasProperty('dbport')) {
        defaultPort = dbport;
    }
    extension.outOfOrder = true
    extension.validateOnMigrate = false
    extension.locations = ["filesystem:db_migration/sms_operations"]
    extension.schemas = ["sms_operations"]

    extension.url = properties.getProperty("common.environment").equals("PRODUCTION") ? "jdbc:mysql://${defaultHost}:${defaultPort}/sms_operations?useUnicode=true&characterEncoding=UTF-8" : "jdbc:mysql://${defaultHost}:${defaultPort}?useUnicode=true&characterEncoding=UTF-8"
    extension.user = properties.getProperty("common.jdbc.username")
    extension.password = properties.getProperty("common.jdbc.password")
}
task flywayWorker(type: FlywayMigrateTask) {
    def properties = getEnvProperties()
    def defaultHost = properties.getProperty("common.jdbc.host")
    def defaultPort = properties.getProperty("common.jdbc.port")
    extension = new FlywayExtension()
    if (project.hasProperty('dbhost')) {
        defaultHost = dbhost;
    }
    if (project.hasProperty('dbport')) {
        defaultPort = dbport;
    }
    extension.outOfOrder = true
    extension.validateOnMigrate = false
    extension.locations = ["filesystem:db_migration/job_worker"]
    extension.schemas = ["job_worker"]

    extension.url = properties.getProperty("common.environment").equals("PRODUCTION") ? "jdbc:mysql://${defaultHost}:${defaultPort}/job_worker?useUnicode=true&characterEncoding=UTF-8" : "jdbc:mysql://${defaultHost}:${defaultPort}?useUnicode=true&characterEncoding=UTF-8"
    extension.user = properties.getProperty("common.jdbc.username")
    extension.password = properties.getProperty("common.jdbc.password")
}

def getEnvProperties() {
    def sourcePropertiesFilePath = "${project.projectDir.getPath()}/src/main/resources/ttsd-env.properties"
    def buildPropertiesFilePath = "${project.buildDir.getPath()}/resources/main/ttsd-env.properties"
    def properties = new Properties()

    def sourceFile = new File(sourcePropertiesFilePath)
    if (sourceFile.isFile()) {
        properties.load(new FileInputStream(sourceFile))
    }

    def buildFile = new File(buildPropertiesFilePath)
    if (buildFile.isFile()) {
        properties.load(new FileInputStream(buildFile))
    }

    if (project.hasProperty("configPath") && new File("${configPath}/ttsd-env.properties").isFile()) {
        properties.load(new FileInputStream(new File("${configPath}/ttsd-env.properties")))
    }
    return properties
}