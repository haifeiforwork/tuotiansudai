apply plugin: 'java'


dependencies {
    compile project(':ttsd-service')
}

startScripts {
    def default_jmx_port = 2911;
    if (project.hasProperty('rop')) {
        if ("invest".equals(rop)) {
            default_jmx_port = 2912;
        }
        if ("jpush".equals(rop)) {
            default_jmx_port = 2913;
        }
    }
    defaultJvmOpts = [
            "-Dcom.sun.management.jmxremote=true",
            "-Dcom.sun.management.jmxremote.port=" + default_jmx_port,
            "-Dcom.sun.management.jmxremote.ssl=false",
            "-Dcom.sun.management.jmxremote.authenticate=false",
            "-Dorg.quartz.scheduler.jmx.export=true"
    ];

}

processResources {
    def defaultProperties = 'all'
    if (project.hasProperty('rop')) {
        defaultProperties = rop;
    }
    def innerConfigPath = "${project.projectDir.getPath()}/src/main/resources"
    from("${innerConfigPath}/log4j.properties") {
        filter { String line ->
            if (line.startsWith("log4j.appender.D.File=")) {
                return "log4j.appender.D.File=/var/log/job-worker/${defaultProperties}-debug.log"
            }
            if (line.startsWith("log4j.appender.I.File=")) {
                return "log4j.appender.I.File=/var/log/job-worker/${defaultProperties}-info.log"
            }
            if (line.startsWith("log4j.appender.E.File=")) {
                return "log4j.appender.E.File=/var/log/job-worker/${defaultProperties}-error.log"
            }
            line
        }
        into '/'
    }
    from("${innerConfigPath}/job-worker.properties.deploy/job-worker-${defaultProperties}.properties") {
        into '/'
        rename "job-worker-${defaultProperties}.properties", 'job-worker.properties'
    }
}

distZip {
    def defaultProperties = 'all'
    if (project.hasProperty('rop')) {
        defaultProperties = rop;
    }
    archiveName baseName + '-' + defaultProperties + '.zip'
}


mainClassName = "com.tuotiansudai.scheduler.Main"
